# Programmer: Laura Castro
# Date: August 13, 2023
# Purpose: recursion using fibonacci function
fibonacci_cache = {} # This will store the computed Nth term

# This is explicit memoization
# This is the function that checks if the value is stored in the dictionary
# It also computes the Nth term
"""
def fibonacci(n):
    #If we have cached the value, then return it 
    if n in fibonacci_cache:
        return fibonacci_cache[n]
    
    #Compute the Nth term
    if n == 1:
        value = 1
    elif n == 2:
        value = 1
    elif n > 2:
        value = fibonacci(n-1) + fibonacci(n-2) 
    
    # Cache the value and return it
    fibonacci_cache[n] = value
    return value

for n in range(1, 101):
    print(n, ":", fibonacci(n))
"""

# This is memoization with a python tool - lru_cache
from functools import lru_cache

@lru_cache(maxsize=1000)

def fibonacci(n):
    # Check that the input is a positive integer
    if type(n) != int:
        raise TypeError("n must be a positive int")
    if n < 1:
        raise ValueError("n must be a positive int")
    
    #Compute the Nth term
    if n == 1:
        return 1
    elif n == 2:
        return 1
    elif n > 2:
        return fibonacci(n-1) + fibonacci(n-2)

for n in range(1, 101):
    print(n, ":", fibonacci(n))